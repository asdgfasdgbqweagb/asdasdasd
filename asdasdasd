-- VexUI: An advanced UI library for Roblox exploits
-- Better than Fluriore and Sitinkhub with modular design, theming, and enhanced features

local VexUI = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CoreGui = LocalPlayer.PlayerGui

-- Default Theme
VexUI.Theme = {
    Primary = Color3.fromRGB(100, 150, 255),
    Secondary = Color3.fromRGB(50, 50, 50),
    Background = Color3.fromRGB(30, 30, 30),
    Text = Color3.fromRGB(255, 255, 255),
    Accent = Color3.fromRGB(200, 200, 200),
    Font = Enum.Font.GothamBold,
    FontSize = 14,
    CornerRadius = UDim.new(0, 6),
    StrokeThickness = 1,
    AnimationSpeed = 0.3,
    EasingStyle = Enum.EasingStyle.Quad,
    EasingDirection = Enum.EasingDirection.InOut
}

-- Predefined Themes
VexUI.Themes = {
    Dark = VexUI.Theme,
    Light = {
        Primary = Color3.fromRGB(0, 123, 255),
        Secondary = Color3.fromRGB(248, 249, 250),
        Background = Color3.fromRGB(255, 255, 255),
        Text = Color3.fromRGB(33, 37, 41),
        Accent = Color3.fromRGB(108, 117, 125),
        Font = Enum.Font.GothamBold,
        FontSize = 14,
        CornerRadius = UDim.new(0, 6),
        StrokeThickness = 1,
        AnimationSpeed = 0.3,
        EasingStyle = Enum.EasingStyle.Quad,
        EasingDirection = Enum.EasingDirection.InOut
    },
    Neon = {
        Primary = Color3.fromRGB(255, 0, 255),
        Secondary = Color3.fromRGB(20, 20, 20),
        Background = Color3.fromRGB(0, 0, 0),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(255, 255, 0),
        Font = Enum.Font.GothamBold,
        FontSize = 14,
        CornerRadius = UDim.new(0, 6),
        StrokeThickness = 2,
        AnimationSpeed = 0.2,
        EasingStyle = Enum.EasingStyle.Back,
        EasingDirection = Enum.EasingDirection.InOut
    }
}

-- Animation Presets
VexUI.Animations = {
    Bounce = {EasingStyle = Enum.EasingStyle.Bounce, EasingDirection = Enum.EasingDirection.Out},
    Elastic = {EasingStyle = Enum.EasingStyle.Elastic, EasingDirection = Enum.EasingDirection.Out},
    Smooth = {EasingStyle = Enum.EasingStyle.Sine, EasingDirection = Enum.EasingDirection.InOut},
    Quick = {EasingStyle = Enum.EasingStyle.Quad, EasingDirection = Enum.EasingDirection.InOut, AnimationSpeed = 0.1}
}

function VexUI:SetTheme(themeName)
    if VexUI.Themes[themeName] then
        VexUI.Theme = VexUI.Themes[themeName]
    end
end

function VexUI:SetAnimation(animationName)
    if VexUI.Animations[animationName] then
        for k, v in pairs(VexUI.Animations[animationName]) do
            VexUI.Theme[k] = v
        end
    end
end

-- Utility Functions
local function CreateInstance(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

local function Tween(object, properties, duration, easingStyle, easingDirection)
    duration = duration or VexUI.Theme.AnimationSpeed
    easingStyle = easingStyle or VexUI.Theme.EasingStyle
    easingDirection = easingDirection or VexUI.Theme.EasingDirection
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function MakeDraggable(frame, handle)
    local dragging = false
    local dragInput
    local dragStart
    local startPos

    local function updateInput(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        Tween(frame, {Position = newPos})
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end)
end

local function MakeResizable(frame, handle)
    local resizing = false
    local resizeInput
    local resizeStart
    local startSize

    local function updateSize(input)
        local delta = input.Position - resizeStart
        local newSize = UDim2.new(0, math.max(startSize.X.Offset + delta.X, 300), 0, math.max(startSize.Y.Offset + delta.Y, 200))
        Tween(frame, {Size = newSize})
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = true
            resizeStart = input.Position
            startSize = frame.Size
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    resizing = false
                end
            end)
        end
    end)

    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            resizeInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == resizeInput and resizing then
            updateSize(input)
        end
    end)
end

local function CircleClick(button, x, y)
    spawn(function()
        button.ClipsDescendants = true
        local circle = CreateInstance("ImageLabel", {
            Image = "rbxassetid://266543268",
            ImageColor3 = VexUI.Theme.Primary,
            ImageTransparency = 0.7,
            BackgroundTransparency = 1,
            ZIndex = 10,
            Parent = button
        })
        local newX = x - circle.AbsolutePosition.X
        local newY = y - circle.AbsolutePosition.Y
        circle.Position = UDim2.new(0, newX, 0, newY)
        local size = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 1.5
        Tween(circle, {Size = UDim2.new(0, size, 0, size), Position = UDim2.new(0.5, -size/2, 0.5, -size/2)}, 0.5)
        for i = 1, 10 do
            circle.ImageTransparency = circle.ImageTransparency + 0.01
            wait(0.05)
        end
        circle:Destroy()
    end)
end

local function CreateTooltip(parent, text)
    local tooltip = CreateInstance("TextLabel", {
        Text = text,
        Font = VexUI.Theme.Font,
        TextSize = VexUI.Theme.FontSize - 2,
        TextColor3 = VexUI.Theme.Text,
        BackgroundColor3 = VexUI.Theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 100, 0, 20),
        Visible = false,
        ZIndex = 100,
        Parent = parent
    })

    local tooltipCorner = CreateInstance("UICorner", {CornerRadius = VexUI.Theme.CornerRadius, Parent = tooltip})
    local tooltipStroke = CreateInstance("UIStroke", {Color = VexUI.Theme.Primary, Thickness = 1, Parent = tooltip})

    parent.MouseEnter:Connect(function()
        tooltip.Position = UDim2.new(0, Mouse.X - parent.AbsolutePosition.X + 10, 0, Mouse.Y - parent.AbsolutePosition.Y - 30)
        tooltip.Visible = true
    end)

    parent.MouseLeave:Connect(function()
        tooltip.Visible = false
    end)

    return tooltip
end

-- Notification System
function VexUI:Notify(config)
    config = config or {}
    config.Title = config.Title or "Vex Hub"
    config.Description = config.Description or ""
    config.Content = config.Content or ""
    config.Color = config.Color or VexUI.Theme.Primary
    config.Duration = config.Duration or 5
    config.Icon = config.Icon or ""

    local notifyGui = CoreGui:FindFirstChild("VexNotifyGui")
    if not notifyGui then
        notifyGui = CreateInstance("ScreenGui", {
            Name = "VexNotifyGui",
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
            Parent = CoreGui
        })
    end

    local notifyFrame = CreateInstance("Frame", {
        BackgroundColor3 = VexUI.Theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 300, 0, 80),
        Position = UDim2.new(1, 320, 1, -100),
        Parent = notifyGui
    })

    local uicorner = CreateInstance("UICorner", {CornerRadius = VexUI.Theme.CornerRadius, Parent = notifyFrame})
    local uistroke = CreateInstance("UIStroke", {Color = config.Color, Thickness = VexUI.Theme.StrokeThickness, Parent = notifyFrame})

    local titleLabel = CreateInstance("TextLabel", {
        Font = VexUI.Theme.Font,
        Text = config.Title,
        TextColor3 = config.Color,
        TextSize = VexUI.Theme.FontSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 5),
        Size = UDim2.new(1, -20, 0, 20),
        Parent = notifyFrame
    })

    local contentLabel = CreateInstance("TextLabel", {
        Font = VexUI.Theme.Font,
        Text = config.Content,
        TextColor3 = VexUI.Theme.Text,
        TextSize = VexUI.Theme.FontSize - 2,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 25),
        Size = UDim2.new(1, -20, 0, 45),
        Parent = notifyFrame
    })

    local closeButton = CreateInstance("TextButton", {
        Text = "X",
        Font = VexUI.Theme.Font,
        TextColor3 = VexUI.Theme.Text,
        TextSize = VexUI.Theme.FontSize,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0, 5),
        Size = UDim2.new(0, 20, 0, 20),
        Parent = notifyFrame
    })

    -- Position notification
    local yOffset = 0
    for _, child in ipairs(notifyGui:GetChildren()) do
        if child:IsA("Frame") then
            yOffset = yOffset - 90
        end
    end
    notifyFrame.Position = UDim2.new(1, 320, 1, yOffset)

    -- Animate in
    Tween(notifyFrame, {Position = UDim2.new(1, -320, 1, yOffset)}, 0.5)

    -- Auto close
    task.delay(config.Duration, function()
        Tween(notifyFrame, {Position = UDim2.new(1, 320, 1, yOffset)}, 0.5)
        task.wait(0.5)
        notifyFrame:Destroy()
    end)

    closeButton.Activated:Connect(function()
        Tween(notifyFrame, {Position = UDim2.new(1, 320, 1, yOffset)}, 0.5)
        task.wait(0.5)
        notifyFrame:Destroy()
    end)

    return {
        Close = function()
            Tween(notifyFrame, {Position = UDim2.new(1, 320, 1, yOffset)}, 0.5)
            task.wait(0.5)
            notifyFrame:Destroy()
        end
    }
end

-- Main GUI
function VexUI:CreateWindow(config)
    config = config or {}
    config.Title = config.Title or "Vex Hub"
    config.Description = config.Description or "Advanced UI Library"
    config.Size = config.Size or UDim2.new(0, 600, 0, 400)
    config.Position = config.Position or UDim2.new(0.5, -300, 0.5, -200)
    config.Theme = config.Theme or VexUI.Theme

    local window = {}

    local gui = CreateInstance("ScreenGui", {
        Name = "VexUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = CoreGui
    })

    local mainFrame = CreateInstance("Frame", {
        BackgroundColor3 = config.Theme.Background,
        BorderSizePixel = 0,
        Size = config.Size,
        Position = config.Position,
        Parent = gui
    })

    local uicorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = mainFrame})
    local uistroke = CreateInstance("UIStroke", {Color = config.Theme.Primary, Thickness = config.Theme.StrokeThickness, Parent = mainFrame})

    local titleBar = CreateInstance("Frame", {
        BackgroundColor3 = config.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40),
        Parent = mainFrame
    })

    local titleLabel = CreateInstance("TextLabel", {
        Font = config.Theme.Font,
        Text = config.Title,
        TextColor3 = config.Theme.Text,
        TextSize = config.Theme.FontSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -100, 1, 0),
        Parent = titleBar
    })

    local closeButton = CreateInstance("TextButton", {
        Text = "X",
        Font = config.Theme.Font,
        TextColor3 = config.Theme.Text,
        TextSize = config.Theme.FontSize,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Parent = titleBar
    })

    local minimizeButton = CreateInstance("TextButton", {
        Text = "-",
        Font = config.Theme.Font,
        TextColor3 = config.Theme.Text,
        TextSize = config.Theme.FontSize,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Parent = titleBar
    })

    local contentFrame = CreateInstance("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(1, 0, 1, -40),
        Parent = mainFrame
    })

    local tabContainer = CreateInstance("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 150, 1, 0),
        Parent = contentFrame
    })

    local tabScroll = CreateInstance("ScrollingFrame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, -50),
        Position = UDim2.new(0, 0, 0, 50),
        ScrollBarThickness = 0,
        Parent = tabContainer
    })

    local tabList = CreateInstance("UIListLayout", {
        Padding = UDim.new(0, 5),
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = tabScroll
    })

    local pageContainer = CreateInstance("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 160, 0, 0),
        Size = UDim2.new(1, -170, 1, 0),
        Parent = contentFrame
    })

    local pageLayout = CreateInstance("UIPageLayout", {
        TweenTime = config.Theme.AnimationSpeed,
        EasingStyle = config.Theme.EasingStyle,
        EasingDirection = config.Theme.EasingDirection,
        Parent = pageContainer
    })

    MakeDraggable(mainFrame, titleBar)
    MakeResizable(mainFrame, CreateInstance("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -20, 1, -20),
        Size = UDim2.new(0, 20, 0, 20),
        Parent = mainFrame
    }))

    -- Accessibility: Keyboard Navigation
    local focusedElement = nil
    local focusableElements = {}

    local function addFocusable(element)
        table.insert(focusableElements, element)
        element.InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.Space then
                element:Activate()
            end
        end)
    end

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.Tab then
            if focusedElement then
                local currentIndex = table.find(focusableElements, focusedElement)
                if currentIndex then
                    focusedElement = focusableElements[currentIndex % #focusableElements + 1]
                end
            else
                focusedElement = focusableElements[1]
            end
            -- Highlight focused element
            if focusedElement then
                Tween(focusedElement, {BackgroundColor3 = config.Theme.Primary}, 0.1)
            end
        elseif input.KeyCode == Enum.KeyCode.Escape then
            mainFrame.Visible = false
        end
    end)

    local tabs = {}
    local currentTab = nil

    function window:AddTab(tabConfig)
        tabConfig = tabConfig or {}
        tabConfig.Name = tabConfig.Name or "Tab"
        tabConfig.Icon = tabConfig.Icon or ""

        local tab = {}

        local tabButton = CreateInstance("TextButton", {
            BackgroundColor3 = config.Theme.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 30),
            Text = "",
            Parent = tabScroll
        })

        local tabCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = tabButton})

        local tabIcon = CreateInstance("ImageLabel", {
            Image = tabConfig.Icon,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 5, 0, 5),
            Size = UDim2.new(0, 20, 0, 20),
            Parent = tabButton
        })

        local tabLabel = CreateInstance("TextLabel", {
            Font = config.Theme.Font,
            Text = tabConfig.Name,
            TextColor3 = config.Theme.Text,
            TextSize = config.Theme.FontSize - 2,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 30, 0, 0),
            Size = UDim2.new(1, -35, 1, 0),
            Parent = tabButton
        })

        local tabPage = CreateInstance("ScrollingFrame", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            ScrollBarThickness = 3,
            Parent = pageContainer
        })

        local pageList = CreateInstance("UIListLayout", {
            Padding = UDim.new(0, 5),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = tabPage
        })

        tabButton.Activated:Connect(function()
            CircleClick(tabButton, Mouse.X, Mouse.Y)
            if currentTab then
                Tween(currentTab.Button, {BackgroundColor3 = config.Theme.Secondary})
            end
            Tween(tabButton, {BackgroundColor3 = config.Theme.Primary})
            pageLayout:JumpToIndex(tabButton.LayoutOrder)
            currentTab = tab
        end)

        tab.Button = tabButton
        tab.Page = tabPage
        tab.Name = tabConfig.Name

        local sections = {}

        function tab:AddSection(sectionConfig)
            sectionConfig = sectionConfig or {}
            sectionConfig.Title = sectionConfig.Title or "Section"

            local section = {}

            local sectionFrame = CreateInstance("Frame", {
                BackgroundColor3 = config.Theme.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 30),
                Parent = tabPage
            })

            local sectionCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = sectionFrame})

            local sectionLabel = CreateInstance("TextLabel", {
                Font = config.Theme.Font,
                Text = sectionConfig.Title,
                TextColor3 = config.Theme.Text,
                TextSize = config.Theme.FontSize,
                TextXAlignment = Enum.TextXAlignment.Left,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Parent = sectionFrame
            })

            local toggleButton = CreateInstance("TextButton", {
                Text = "+",
                Font = config.Theme.Font,
                TextColor3 = config.Theme.Text,
                TextSize = config.Theme.FontSize,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -30, 0, 0),
                Size = UDim2.new(0, 25, 1, 0),
                Parent = sectionFrame
            })

            local contentFrame = CreateInstance("Frame", {
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 35),
                Size = UDim2.new(1, 0, 0, 0),
                ClipsDescendants = true,
                Parent = sectionFrame
            })

            local contentList = CreateInstance("UIListLayout", {
                Padding = UDim.new(0, 3),
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = contentFrame
            })

            local expanded = false

            toggleButton.Activated:Connect(function()
                expanded = not expanded
                if expanded then
                    toggleButton.Text = "-"
                    local contentHeight = 0
                    for _, child in ipairs(contentFrame:GetChildren()) do
                        if child:IsA("Frame") then
                            contentHeight = contentHeight + child.Size.Y.Offset + 3
                        end
                    end
                    Tween(sectionFrame, {Size = UDim2.new(1, -10, 0, 35 + contentHeight)})
                    Tween(contentFrame, {Size = UDim2.new(1, 0, 0, contentHeight)})
                else
                    toggleButton.Text = "+"
                    Tween(sectionFrame, {Size = UDim2.new(1, -10, 0, 30)})
                    Tween(contentFrame, {Size = UDim2.new(1, 0, 0, 0)})
                end
            end)

            local items = {}

            function section:AddButton(buttonConfig)
                buttonConfig = buttonConfig or {}
                buttonConfig.Title = buttonConfig.Title or "Button"
                buttonConfig.Callback = buttonConfig.Callback or function() end

                local buttonFrame = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Background,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 35),
                    Parent = contentFrame
                })

                local buttonCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = buttonFrame})

                local buttonLabel = CreateInstance("TextLabel", {
                    Font = config.Theme.Font,
                    Text = buttonConfig.Title,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Parent = buttonFrame
                })

                local button = CreateInstance("TextButton", {
                    Text = "",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Parent = buttonFrame
                })

                button.Activated:Connect(function()
                    CircleClick(button, Mouse.X, Mouse.Y)
                    buttonConfig.Callback()
                end)

                addFocusable(button)

                return {
                    SetText = function(text)
                        buttonLabel.Text = text
                    end,
                    SetCallback = function(callback)
                        buttonConfig.Callback = callback
                    end
                }
            end

            function section:AddToggle(toggleConfig)
                toggleConfig = toggleConfig or {}
                toggleConfig.Title = toggleConfig.Title or "Toggle"
                toggleConfig.Default = toggleConfig.Default or false
                toggleConfig.Callback = toggleConfig.Callback or function() end

                local toggleFrame = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Background,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 35),
                    Parent = contentFrame
                })

                local toggleCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = toggleFrame})

                local toggleLabel = CreateInstance("TextLabel", {
                    Font = config.Theme.Font,
                    Text = toggleConfig.Title,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -50, 1, 0),
                    Parent = toggleFrame
                })

                local toggleSwitch = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Secondary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -40, 0.5, -10),
                    Size = UDim2.new(0, 30, 0, 20),
                    Parent = toggleFrame
                })

                local switchCorner = CreateInstance("UICorner", {CornerRadius = UDim.new(0, 10), Parent = toggleSwitch})

                local switchCircle = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Text,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 2, 0, 2),
                    Size = UDim2.new(0, 16, 0, 16),
                    Parent = toggleSwitch
                })

                local circleCorner = CreateInstance("UICorner", {CornerRadius = UDim.new(0, 8), Parent = switchCircle})

                local toggleButton = CreateInstance("TextButton", {
                    Text = "",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Parent = toggleFrame
                })

                local toggled = toggleConfig.Default

                local function updateToggle()
                    if toggled then
                        Tween(toggleSwitch, {BackgroundColor3 = config.Theme.Primary})
                        Tween(switchCircle, {Position = UDim2.new(0, 12, 0, 2)})
                        Tween(toggleLabel, {TextColor3 = config.Theme.Primary})
                    else
                        Tween(toggleSwitch, {BackgroundColor3 = config.Theme.Secondary})
                        Tween(switchCircle, {Position = UDim2.new(0, 2, 0, 2)})
                        Tween(toggleLabel, {TextColor3 = config.Theme.Text})
                    end
                end

                toggleButton.Activated:Connect(function()
                    CircleClick(toggleButton, Mouse.X, Mouse.Y)
                    toggled = not toggled
                    updateToggle()
                    toggleConfig.Callback(toggled)
                end)

                addFocusable(toggleButton)

                updateToggle()

                return {
                    SetValue = function(value)
                        toggled = value
                        updateToggle()
                        toggleConfig.Callback(toggled)
                    end,
                    GetValue = function()
                        return toggled
                    end
                }
            end

            function section:AddSlider(sliderConfig)
                sliderConfig = sliderConfig or {}
                sliderConfig.Title = sliderConfig.Title or "Slider"
                sliderConfig.Min = sliderConfig.Min or 0
                sliderConfig.Max = sliderConfig.Max or 100
                sliderConfig.Default = sliderConfig.Default or 50
                sliderConfig.Callback = sliderConfig.Callback or function() end

                local sliderFrame = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Background,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 50),
                    Parent = contentFrame
                })

                local sliderCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = sliderFrame})

                local sliderLabel = CreateInstance("TextLabel", {
                    Font = config.Theme.Font,
                    Text = sliderConfig.Title,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 5),
                    Size = UDim2.new(1, -100, 0, 20),
                    Parent = sliderFrame
                })

                local sliderBar = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Secondary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 30),
                    Size = UDim2.new(1, -80, 0, 4),
                    Parent = sliderFrame
                })

                local barCorner = CreateInstance("UICorner", {CornerRadius = UDim.new(0, 2), Parent = sliderBar})

                local sliderFill = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Primary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(0.5, 0, 1, 0),
                    Parent = sliderBar
                })

                local fillCorner = CreateInstance("UICorner", {CornerRadius = UDim.new(0, 2), Parent = sliderFill})

                local sliderValue = CreateInstance("TextLabel", {
                    Font = config.Theme.Font,
                    Text = tostring(sliderConfig.Default),
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -60, 0, 5),
                    Size = UDim2.new(0, 50, 0, 20),
                    Parent = sliderFrame
                })

                local dragging = false

                local function updateValue(position)
                    local percent = math.clamp((position - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                    local value = math.floor(sliderConfig.Min + (sliderConfig.Max - sliderConfig.Min) * percent)
                    sliderValue.Text = tostring(value)
                    Tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)})
                    sliderConfig.Callback(value)
                end

                sliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        updateValue(input.Position.X)
                    end
                end)

                sliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateValue(input.Position.X)
                    end
                end)

                updateValue(sliderBar.AbsolutePosition.X + sliderBar.AbsoluteSize.X * ((sliderConfig.Default - sliderConfig.Min) / (sliderConfig.Max - sliderConfig.Min)))

                return {
                    SetValue = function(value)
                        value = math.clamp(value, sliderConfig.Min, sliderConfig.Max)
                        updateValue(sliderBar.AbsolutePosition.X + sliderBar.AbsoluteSize.X * ((value - sliderConfig.Min) / (sliderConfig.Max - sliderConfig.Min)))
                    end,
                    GetValue = function()
                        return tonumber(sliderValue.Text)
                    end
                }
            end

            function section:AddInput(inputConfig)
                inputConfig = inputConfig or {}
                inputConfig.Title = inputConfig.Title or "Input"
                inputConfig.Placeholder = inputConfig.Placeholder or "Enter text..."
                inputConfig.Default = inputConfig.Default or ""
                inputConfig.Callback = inputConfig.Callback or function() end

                local inputFrame = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Background,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 50),
                    Parent = contentFrame
                })

                local inputCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = inputFrame})

                local inputLabel = CreateInstance("TextLabel", {
                    Font = config.Theme.Font,
                    Text = inputConfig.Title,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 5),
                    Size = UDim2.new(1, -20, 0, 20),
                    Parent = inputFrame
                })

                local inputBox = CreateInstance("TextBox", {
                    Font = config.Theme.Font,
                    Text = inputConfig.Default,
                    PlaceholderText = inputConfig.Placeholder,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    BackgroundColor3 = config.Theme.Secondary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 25),
                    Size = UDim2.new(1, -20, 0, 20),
                    Parent = inputFrame
                })

                local boxCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = inputBox})

                inputBox.FocusLost:Connect(function(enterPressed)
                    inputConfig.Callback(inputBox.Text)
                end)

                return {
                    SetText = function(text)
                        inputBox.Text = text
                    end,
                    GetText = function()
                        return inputBox.Text
                    end
                }
            end

            function section:AddDropdown(dropdownConfig)
                dropdownConfig = dropdownConfig or {}
                dropdownConfig.Title = dropdownConfig.Title or "Dropdown"
                dropdownConfig.Options = dropdownConfig.Options or {}
                dropdownConfig.Default = dropdownConfig.Default or ""
                dropdownConfig.Callback = dropdownConfig.Callback or function() end

                local dropdownFrame = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Background,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 50),
                    Parent = contentFrame
                })

                local dropdownCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = dropdownFrame})

                local dropdownLabel = CreateInstance("TextLabel", {
                    Font = config.Theme.Font,
                    Text = dropdownConfig.Title,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 5),
                    Size = UDim2.new(1, -50, 0, 20),
                    Parent = dropdownFrame
                })

                local selectedLabel = CreateInstance("TextLabel", {
                    Font = config.Theme.Font,
                    Text = dropdownConfig.Default,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize - 2,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundColor3 = config.Theme.Secondary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 25),
                    Size = UDim2.new(1, -40, 0, 20),
                    Parent = dropdownFrame
                })

                local selectedCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = selectedLabel})

                local arrowButton = CreateInstance("TextButton", {
                    Text = "▼",
                    Font = config.Theme.Font,
                    TextColor3 = config.Theme.Text,
                    TextSize = config.Theme.FontSize,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -25, 0, 25),
                    Size = UDim2.new(0, 20, 0, 20),
                    Parent = dropdownFrame
                })

                local optionsFrame = CreateInstance("Frame", {
                    BackgroundColor3 = config.Theme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 50),
                    Size = UDim2.new(1, -20, 0, 0),
                    Visible = false,
                    Parent = dropdownFrame
                })

                local optionsCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = optionsFrame})

                local optionsList = CreateInstance("UIListLayout", {
                    Padding = UDim.new(0, 2),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = optionsFrame
                })

                local expanded = false

                local function toggleDropdown()
                    expanded = not expanded
                    if expanded then
                        local height = #dropdownConfig.Options * 22
                        Tween(optionsFrame, {Size = UDim2.new(1, -20, 0, height)})
                        Tween(dropdownFrame, {Size = UDim2.new(1, -10, 0, 55 + height)})
                        optionsFrame.Visible = true
                    else
                        Tween(optionsFrame, {Size = UDim2.new(1, -20, 0, 0)})
                        Tween(dropdownFrame, {Size = UDim2.new(1, -10, 0, 50)})
                        task.wait(0.3)
                        optionsFrame.Visible = false
                    end
                end

                arrowButton.Activated:Connect(function()
                    toggleDropdown()
                end)

                for _, option in ipairs(dropdownConfig.Options) do
                    local optionButton = CreateInstance("TextButton", {
                        Text = option,
                        Font = config.Theme.Font,
                        TextColor3 = config.Theme.Text,
                        TextSize = config.Theme.FontSize - 2,
                        BackgroundColor3 = config.Theme.Secondary,
                        BorderSizePixel = 0,
                        Size = UDim2.new(1, 0, 0, 20),
                        Parent = optionsFrame
                    })

                    local optionCorner = CreateInstance("UICorner", {CornerRadius = config.Theme.CornerRadius, Parent = optionButton})

                    optionButton.Activated:Connect(function()
                        selectedLabel.Text = option
                        dropdownConfig.Callback(option)
                        toggleDropdown()
                    end)
                end

                return {
                    SetSelected = function(option)
                        selectedLabel.Text = option
                        dropdownConfig.Callback(option)
                    end,
                    GetSelected = function()
                        return selectedLabel.Text
                    end
                }
            end

            table.insert(sections, section)
            return section
        end

        table.insert(tabs, tab)
        return tab
    end

    closeButton.Activated:Connect(function()
        gui:Destroy()
    end)

    minimizeButton.Activated:Connect(function()
        mainFrame.Visible = not mainFrame.Visible
    end)

    window.Gui = gui
    window.MainFrame = mainFrame
    window.Tabs = tabs

    return window
end

return VexUI
