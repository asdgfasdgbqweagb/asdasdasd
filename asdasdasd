-- VexUI - Advanced Roblox UI Library
-- Inspired by HawkUI, Rayfield, Fluriore, SitinkHub, and WazureV1
-- Created with modern patterns and best practices

local VexUI = {
    Version = "1.0.0",
    Author = "Kilo Code",
    Themes = {},
    Components = {},
    Utils = {},
    Config = {},
    Notifications = {}
}
-- Default Themes
VexUI.Themes = {
    Dark = {
        Main = Color3.fromRGB(25, 25, 25),
        Shadow = Color3.fromRGB(0, 0, 0),
        TitleBar = Color3.fromRGB(31, 31, 31),
        TabBefore = Color3.fromRGB(33, 33, 33),
        TabAfter = Color3.fromRGB(41, 41, 41),
        TitleTextColor = Color3.fromRGB(255, 255, 255),
        TabTextColor = Color3.fromRGB(255, 255, 255),
        TitleLineColor = Color3.fromRGB(44, 44, 44),
        Selection = Color3.fromRGB(255, 66, 66),
        CloseMinimize = Color3.fromRGB(74, 74, 74),
        ItemColors = Color3.fromRGB(35, 35, 35),
        ItemTitleColors = Color3.fromRGB(231, 231, 231),
        ItemTextColors = Color3.fromRGB(171, 171, 170),
        ItemTextBoxKeyBindColors = Color3.fromRGB(27, 27, 27),
        ItemTextBoxKeyBindStrokeColors = Color3.fromRGB(60, 60, 60),
        ItemTextBoxTextColor = Color3.fromRGB(132, 132, 132),
        ItemKeyBindTextColor = Color3.fromRGB(199, 199, 199),
        ToggleTickColor = Color3.fromRGB(255, 255, 255),
        ButtonClickIconColor = Color3.fromRGB(182, 182, 182),
        ButtonHover = Color3.fromRGB(42, 42, 42),
        ButtonIconColor = Color3.fromRGB(255, 255, 255),
        SliderButtonFrameColor = Color3.fromRGB(35, 45, 55),
        InSliderFrame = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(44, 107, 162)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 62, 93))},
        NumColor = Color3.fromRGB(124, 155, 182),
        DropdownColorPickerImageArrowColors = Color3.fromRGB(199, 199, 199),
        NotificationNotifyColor = Color3.fromRGB(42, 44, 42),
        NotificationNotifyTitleColor = Color3.fromRGB(231, 231, 231),
        NotificationNotifyTextColor = Color3.fromRGB(171, 171, 170),
        IconColor = Color3.fromRGB(255, 255, 255),
        IconShadow = Color3.fromRGB(0, 0, 0),
        NotifyButtons = Color3.fromRGB(163, 162, 165),
        RippleColor = Color3.fromRGB(255, 255, 255),
        ScrollBarColor = Color3.fromRGB(100, 100, 100)
    },
    Light = {
        Main = Color3.fromRGB(245, 245, 245),
        Shadow = Color3.fromRGB(200, 200, 200),
        TitleBar = Color3.fromRGB(255, 255, 255),
        TabBefore = Color3.fromRGB(239, 239, 239),
        TabAfter = Color3.fromRGB(255, 255, 255),
        TitleTextColor = Color3.fromRGB(36, 36, 36),
        TabTextColor = Color3.fromRGB(0, 0, 0),
        TitleLineColor = Color3.fromRGB(89, 89, 89),
        Selection = Color3.fromRGB(170, 0, 255),
        CloseMinimize = Color3.fromRGB(36, 36, 36),
        ItemColors = Color3.fromRGB(220, 220, 220),
        ItemTitleColors = Color3.fromRGB(0, 0, 0),
        ItemTextColors = Color3.fromRGB(53, 53, 53),
        ItemTextBoxKeyBindColors = Color3.fromRGB(234, 234, 234),
        ItemTextBoxKeyBindStrokeColors = Color3.fromRGB(60, 60, 60),
        ItemTextBoxTextColor = Color3.fromRGB(0, 0, 0),
        ItemKeyBindTextColor = Color3.fromRGB(0, 0, 0),
        ToggleTickColor = Color3.fromRGB(11, 11, 11),
        ButtonClickIconColor = Color3.fromRGB(27, 27, 27),
        ButtonHover = Color3.fromRGB(229, 229, 229),
        ButtonIconColor = Color3.fromRGB(0, 0, 0),
        SliderButtonFrameColor = Color3.fromRGB(162, 209, 255),
        InSliderFrame = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(69, 171, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(46, 114, 170))},
        NumColor = Color3.fromRGB(25, 31, 36),
        DropdownColorPickerImageArrowColors = Color3.fromRGB(0, 0, 0),
        NotificationNotifyColor = Color3.fromRGB(207, 217, 207),
        NotificationNotifyTitleColor = Color3.fromRGB(22, 22, 22),
        NotificationNotifyTextColor = Color3.fromRGB(56, 56, 56),
        IconColor = Color3.fromRGB(48, 48, 48),
        IconShadow = Color3.fromRGB(255, 255, 255),
        NotifyButtons = Color3.fromRGB(52, 52, 53),
        RippleColor = Color3.fromRGB(0, 0, 0),
        ScrollBarColor = Color3.fromRGB(150, 150, 150)
    },
    Pink = {
        Main = Color3.fromRGB(190, 145, 174),
        Shadow = Color3.fromRGB(190, 145, 174),
        TitleBar = Color3.fromRGB(239, 189, 219),
        TabBefore = Color3.fromRGB(237, 175, 203),
        TabAfter = Color3.fromRGB(239, 189, 219),
        TitleTextColor = Color3.fromRGB(80, 70, 75),
        TabTextColor = Color3.fromRGB(0, 0, 0),
        TitleLineColor = Color3.fromRGB(80, 70, 75),
        Selection = Color3.fromRGB(255, 0, 255),
        CloseMinimize = Color3.fromRGB(80, 70, 75),
        ItemColors = Color3.fromRGB(227, 167, 195),
        ItemTitleColors = Color3.fromRGB(43, 43, 41),
        ItemTextColors = Color3.fromRGB(53, 53, 53),
        ItemTextBoxKeyBindColors = Color3.fromRGB(173, 115, 173),
        ItemTextBoxKeyBindStrokeColors = Color3.fromRGB(173, 115, 173),
        ItemTextBoxTextColor = Color3.fromRGB(0, 0, 0),
        ItemKeyBindTextColor = Color3.fromRGB(0, 0, 0),
        ToggleTickColor = Color3.fromRGB(11, 11, 11),
        ButtonClickIconColor = Color3.fromRGB(27, 27, 27),
        ButtonHover = Color3.fromRGB(255, 188, 219),
        ButtonIconColor = Color3.fromRGB(0, 0, 0),
        SliderButtonFrameColor = Color3.fromRGB(162, 209, 255),
        InSliderFrame = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(54, 134, 200)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 62, 93))},
        NumColor = Color3.fromRGB(0, 170, 255),
        DropdownColorPickerImageArrowColors = Color3.fromRGB(199, 199, 199),
        NotificationNotifyColor = Color3.fromRGB(239, 189, 219),
        NotificationNotifyTitleColor = Color3.fromRGB(231, 231, 231),
        NotificationNotifyTextColor = Color3.fromRGB(56, 56, 56),
        IconColor = Color3.fromRGB(48, 48, 48),
        IconShadow = Color3.fromRGB(190, 145, 174),
        NotifyButtons = Color3.fromRGB(52, 52, 53),
        RippleColor = Color3.fromRGB(255, 255, 255),
        ScrollBarColor = Color3.fromRGB(150, 100, 130)
    },
    Blue = {
        Main = Color3.fromRGB(20, 30, 50),
        Shadow = Color3.fromRGB(10, 15, 25),
        TitleBar = Color3.fromRGB(30, 40, 60),
        TabBefore = Color3.fromRGB(35, 45, 65),
        TabAfter = Color3.fromRGB(45, 55, 75),
        TitleTextColor = Color3.fromRGB(255, 255, 255),
        TabTextColor = Color3.fromRGB(255, 255, 255),
        TitleLineColor = Color3.fromRGB(50, 60, 80),
        Selection = Color3.fromRGB(0, 150, 255),
        CloseMinimize = Color3.fromRGB(100, 110, 130),
        ItemColors = Color3.fromRGB(40, 50, 70),
        ItemTitleColors = Color3.fromRGB(220, 230, 240),
        ItemTextColors = Color3.fromRGB(180, 190, 200),
        ItemTextBoxKeyBindColors = Color3.fromRGB(30, 40, 60),
        ItemTextBoxKeyBindStrokeColors = Color3.fromRGB(60, 70, 90),
        ItemTextBoxTextColor = Color3.fromRGB(150, 160, 170),
        ItemKeyBindTextColor = Color3.fromRGB(200, 210, 220),
        ToggleTickColor = Color3.fromRGB(255, 255, 255),
        ButtonClickIconColor = Color3.fromRGB(180, 190, 200),
        ButtonHover = Color3.fromRGB(50, 60, 80),
        ButtonIconColor = Color3.fromRGB(255, 255, 255),
        SliderButtonFrameColor = Color3.fromRGB(35, 45, 65),
        InSliderFrame = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(0, 100, 200)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 60, 120))},
        NumColor = Color3.fromRGB(100, 150, 200),
        DropdownColorPickerImageArrowColors = Color3.fromRGB(200, 210, 220),
        NotificationNotifyColor = Color3.fromRGB(30, 40, 60),
        NotificationNotifyTitleColor = Color3.fromRGB(220, 230, 240),
        NotificationNotifyTextColor = Color3.fromRGB(180, 190, 200),
        IconColor = Color3.fromRGB(255, 255, 255),
        IconShadow = Color3.fromRGB(10, 15, 25),
        NotifyButtons = Color3.fromRGB(150, 160, 170),
        RippleColor = Color3.fromRGB(255, 255, 255),
        ScrollBarColor = Color3.fromRGB(80, 90, 110)
    }
}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Device Detection
VexUI.Utils.DeviceType = {
    PC = "PC",
    Mobile = "Mobile",
    Tablet = "Tablet"
}

function VexUI.Utils:GetDeviceType()
    local touchEnabled = UserInputService.TouchEnabled
    local keyboardEnabled = UserInputService.KeyboardEnabled
    local mouseEnabled = UserInputService.MouseEnabled

    if touchEnabled and keyboardEnabled and mouseEnabled then
        return self.DeviceType.Tablet
    elseif touchEnabled and not keyboardEnabled and not mouseEnabled then
        return self.DeviceType.Mobile
    else
        return self.DeviceType.PC
    end
end

-- Close the Utils module definition

-- Core Classes
VexUI.Core = {}

-- Window Class
VexUI.Core.Window = {}
VexUI.Core.Window.__index = VexUI.Core.Window

function VexUI.Core.Window.new(config)
    local self = setmetatable({}, VexUI.Core.Window)

    self.config = config or {}
    self.config.Name = self.config.Name or "VexUI Window"
    self.config.Size = self.config.Size or UDim2.new(0, 600, 0, 400)
    self.config.Position = self.config.Position or UDim2.new(0.5, -300, 0.5, -200)
    self.config.Theme = self.config.Theme or "Dark"
    self.config.DestroyIfExists = self.config.DestroyIfExists or true

    -- Validate theme exists
    if not VexUI.Themes[self.config.Theme] then
        warn("VexUI: Theme '" .. self.config.Theme .. "' not found, using 'Dark' theme")
        self.config.Theme = "Dark"
    end

    self.tabs = {}
    self.currentTab = nil
    self.dragging = false
    self.minimized = false

    self:CreateGUI()
    return self
end

function VexUI.Core.Window:CreateGUI()
    -- Destroy existing window if needed
    if self.config.DestroyIfExists then
        local existing = game:GetService("CoreGui"):FindFirstChild("VexUI_" .. self.config.Name)
        if existing then
            existing:Destroy()
        end
    end

    -- Main ScreenGui
    self.gui = Instance.new("ScreenGui")
    self.gui.Name = "VexUI_" .. self.config.Name
    self.gui.ResetOnSpawn = false
    self.gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.gui.Parent = game:GetService("CoreGui")

    -- Main Frame
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Name = "MainFrame"
    self.mainFrame.Size = self.config.Size
    self.mainFrame.Position = self.config.Position
    self.mainFrame.BackgroundColor3 = VexUI.Themes[self.config.Theme].Main
    self.mainFrame.BackgroundTransparency = 0.02
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Parent = self.gui

    -- Corner radius
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = self.mainFrame

    -- Shadow
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://5028857084"
    shadow.ImageColor3 = VexUI.Themes[self.config.Theme].Shadow
    shadow.ImageTransparency = 0.5
    shadow.Position = UDim2.new(0, -15, 0, -15)
    shadow.Size = UDim2.new(1, 30, 1, 30)
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(24, 24, 276, 276)
    shadow.ZIndex = 0
    shadow.Parent = self.mainFrame

    -- Title Bar
    self.titleBar = Instance.new("Frame")
    self.titleBar.Name = "TitleBar"
    self.titleBar.Size = UDim2.new(1, 0, 0, 40)
    self.titleBar.BackgroundColor3 = VexUI.Themes[self.config.Theme].TitleBar
    self.titleBar.BackgroundTransparency = 0.1
    self.titleBar.BorderSizePixel = 0
    self.titleBar.Parent = self.mainFrame

    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = self.titleBar

    -- Title Text
    self.titleLabel = Instance.new("TextLabel")
    self.titleLabel.Name = "Title"
    self.titleLabel.Size = UDim2.new(0, 200, 1, 0)
    self.titleLabel.Position = UDim2.new(0, 15, 0, 0)
    self.titleLabel.BackgroundTransparency = 1
    self.titleLabel.Text = self.config.Name
    self.titleLabel.TextColor3 = VexUI.Themes[self.config.Theme].TitleTextColor
    self.titleLabel.TextSize = 16
    self.titleLabel.Font = Enum.Font.GothamBold
    self.titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.titleLabel.Parent = self.titleBar

    -- Close Button
    self.closeButton = Instance.new("TextButton")
    self.closeButton.Name = "Close"
    self.closeButton.Size = UDim2.new(0, 30, 0, 30)
    self.closeButton.Position = UDim2.new(1, -35, 0.5, -15)
    self.closeButton.BackgroundTransparency = 1
    self.closeButton.Text = "×"
    self.closeButton.TextColor3 = VexUI.Themes[self.config.Theme].CloseMinimize
    self.closeButton.TextSize = 20
    self.closeButton.Font = Enum.Font.GothamBold
    self.closeButton.Parent = self.titleBar

    -- Minimize Button
    self.minimizeButton = Instance.new("TextButton")
    self.minimizeButton.Name = "Minimize"
    self.minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    self.minimizeButton.Position = UDim2.new(1, -70, 0.5, -15)
    self.minimizeButton.BackgroundTransparency = 1
    self.minimizeButton.Text = "−"
    self.minimizeButton.TextColor3 = VexUI.Themes[self.config.Theme].CloseMinimize
    self.minimizeButton.TextSize = 24
    self.minimizeButton.Font = Enum.Font.GothamBold
    self.minimizeButton.Parent = self.titleBar

    -- Content Frame
    self.contentFrame = Instance.new("Frame")
    self.contentFrame.Name = "Content"
    self.contentFrame.Size = UDim2.new(1, 0, 1, -40)
    self.contentFrame.Position = UDim2.new(0, 0, 0, 40)
    self.contentFrame.BackgroundTransparency = 1
    self.contentFrame.Parent = self.mainFrame

    -- Tab Container
    self.tabContainer = Instance.new("Frame")
    self.tabContainer.Name = "Tabs"
    self.tabContainer.Size = UDim2.new(0, 150, 1, 0)
    self.tabContainer.BackgroundTransparency = 1
    self.tabContainer.Parent = self.contentFrame

    -- Tab List
    self.tabList = Instance.new("ScrollingFrame")
    self.tabList.Name = "TabList"
    self.tabList.Size = UDim2.new(1, 0, 1, 0)
    self.tabList.BackgroundTransparency = 1
    self.tabList.ScrollBarThickness = 0
    self.tabList.Parent = self.tabContainer

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.Parent = self.tabList
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 5)

    -- Page Container
    self.pageContainer = Instance.new("Frame")
    self.pageContainer.Name = "Pages"
    self.pageContainer.Size = UDim2.new(1, -150, 1, 0)
    self.pageContainer.Position = UDim2.new(0, 150, 0, 0)
    self.pageContainer.BackgroundTransparency = 1
    self.pageContainer.Parent = self.contentFrame

    -- Setup interactions
    self:SetupInteractions()
end

function VexUI.Core.Window:SetupInteractions()
    -- Dragging
    local dragging = false
    local dragStart = nil
    local startPos = nil

    self.titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = self.mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
            local tween = TweenService:Create(self.mainFrame, TweenInfo.new(0.1), {Position = newPos})
            tween:Play()
        end
    end)

    -- Close button
    self.closeButton.MouseButton1Click:Connect(function()
        self:Destroy()
    end)

    -- Minimize button
    self.minimizeButton.MouseButton1Click:Connect(function()
        self:ToggleMinimize()
    end)
end

function VexUI.Core.Tab:CreateButton(config)
    config = config or {}
    local button = VexUI.Components.Button.new(self, config)
    table.insert(self.components, button)
    self:UpdateCanvasSize()
    return button
end

function VexUI.Core.Tab:CreateToggle(config)
    config = config or {}
    local toggle = VexUI.Components.Toggle.new(self, config)
    table.insert(self.components, toggle)
    self:UpdateCanvasSize()
    return toggle
end

function VexUI.Core.Tab:CreateSlider(config)
    config = config or {}
    local slider = VexUI.Components.Slider.new(self, config)
    table.insert(self.components, slider)
    self:UpdateCanvasSize()
    return slider
end

function VexUI.Core.Tab:CreateDropdown(config)
    config = config or {}
    local dropdown = VexUI.Components.Dropdown.new(self, config)
    table.insert(self.components, dropdown)
    self:UpdateCanvasSize()
    return dropdown
end

function VexUI.Core.Tab:UpdateCanvasSize()
    local totalHeight = 0
    for _, component in ipairs(self.components) do
        if component.frame then
            totalHeight = totalHeight + component.frame.Size.Y.Offset + 8 -- 8 for padding
        end
    end
    if self.pageFrame then
        self.pageFrame.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
    end
end

function VexUI.Core.Window:ToggleMinimize()
    if self.minimized then
        -- Restore
        local tween = TweenService:Create(self.mainFrame, TweenInfo.new(0.3), {Size = self.config.Size})
        tween:Play()
        self.minimized = false
    else
        -- Minimize
        local tween = TweenService:Create(self.mainFrame, TweenInfo.new(0.3), {Size = UDim2.new(self.config.Size.X.Scale, self.config.Size.X.Offset, 0, 40)})
        tween:Play()
        self.minimized = true
    end
end

function VexUI.Core.Window:Destroy()
    if self.gui then
        self.gui:Destroy()
    end
end

-- Close the Window class definition
end

-- Tab Class
VexUI.Core.Tab = {}
VexUI.Core.Tab.__index = VexUI.Core.Tab

function VexUI.Core.Tab.new(window, name, icon)
    local self = setmetatable({}, VexUI.Core.Tab)

    self.window = window
    self.name = name
    self.icon = icon
    self.components = {}
    self.selected = false

    self:CreateTab()
    return self
end

function VexUI.Core.Tab:CreateTab()
    -- Tab Button
    self.tabButton = Instance.new("Frame")
    self.tabButton.Name = "Tab_" .. self.name
    self.tabButton.Size = UDim2.new(1, -10, 0, 40)
    self.tabButton.BackgroundColor3 = VexUI.Themes[self.window.config.Theme].TabBefore
    self.tabButton.BorderSizePixel = 0
    self.tabButton.Parent = self.window.tabList

    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = self.tabButton

    -- Tab Text
    self.tabText = Instance.new("TextButton")
    self.tabText.Size = UDim2.new(1, 0, 1, 0)
    self.tabText.BackgroundTransparency = 1
    self.tabText.Text = self.name
    self.tabText.TextColor3 = VexUI.Themes[self.window.config.Theme].TabTextColor
    self.tabText.TextSize = 14
    self.tabText.Font = Enum.Font.Gotham
    self.tabText.Parent = self.tabButton

    -- Page Frame
    self.pageFrame = Instance.new("ScrollingFrame")
    self.pageFrame.Name = "Page_" .. self.name
    self.pageFrame.Size = UDim2.new(1, 0, 1, 0)
    self.pageFrame.BackgroundTransparency = 1
    self.pageFrame.ScrollBarThickness = 4
    self.pageFrame.ScrollBarImageColor3 = VexUI.Themes[self.window.config.Theme].ScrollBarColor or Color3.fromRGB(100, 100, 100)
    self.pageFrame.Visible = false
    self.pageFrame.Parent = self.window.pageContainer

    local pageLayout = Instance.new("UIListLayout")
    pageLayout.Parent = self.pageFrame
    pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    pageLayout.Padding = UDim.new(0, 8)

    -- Setup tab click
    self.tabText.MouseButton1Click:Connect(function()
        self.window:SelectTab(self)
    end)
end

function VexUI.Core.Tab:Select()
    if not self.selected then
        self.selected = true

        -- Update appearance
        local tween = TweenService:Create(self.tabButton, TweenInfo.new(0.2), {
            BackgroundColor3 = VexUI.Themes[self.window.config.Theme].TabAfter
        })
        tween:Play()

        -- Show page
        self.pageFrame.Visible = true
        self.pageFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated when components are added
    end
end

function VexUI.Core.Tab:Deselect()
    if self.selected then
        self.selected = false

        -- Update appearance
        local tween = TweenService:Create(self.tabButton, TweenInfo.new(0.2), {
            BackgroundColor3 = VexUI.Themes[self.window.config.Theme].TabBefore
        })
        tween:Play()

        -- Hide page
        self.pageFrame.Visible = false
    end
end

-- Notification System
VexUI.Notifications = {}

function VexUI.Notifications:Create(config)
    local notificationConfig = config or {}
    notificationConfig.Title = notificationConfig.Title or "Notification"
    notificationConfig.Content = notificationConfig.Content or ""
    notificationConfig.Duration = notificationConfig.Duration or 3
    notificationConfig.Type = notificationConfig.Type or "Info" -- Info, Success, Warning, Error

    -- Create notification GUI if it doesn't exist
    if not self.gui then
        self.gui = Instance.new("ScreenGui")
        self.gui.Name = "VexUINotifications"
        self.gui.ResetOnSpawn = false
        self.gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        self.gui.Parent = game:GetService("CoreGui")

        self.container = Instance.new("Frame")
        self.container.Name = "Container"
        self.container.Size = UDim2.new(0, 300, 1, 0)
        self.container.Position = UDim2.new(1, -320, 0, 10)
        self.container.BackgroundTransparency = 1
        self.container.Parent = self.gui

        self.layout = Instance.new("UIListLayout")
        self.layout.Parent = self.container
        self.layout.SortOrder = Enum.SortOrder.LayoutOrder
        self.layout.VerticalAlignment = Enum.VerticalAlignment.Top
        self.layout.Padding = UDim.new(0, 10)
    end

    -- Create notification frame
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(1, 0, 0, 80)

    -- Safely get notification color
    local notifyColor = VexUI.Themes["Dark"].NotificationNotifyColor -- Default
    local themeName = notificationConfig.Theme or "Dark"
    if VexUI.Themes[themeName] and VexUI.Themes[themeName].NotificationNotifyColor then
        notifyColor = VexUI.Themes[themeName].NotificationNotifyColor
    end

    notification.BackgroundColor3 = notifyColor
    notification.BorderSizePixel = 0
    notification.Parent = self.container

    local notificationCorner = Instance.new("UICorner")
    notificationCorner.CornerRadius = UDim.new(0, 8)
    notificationCorner.Parent = notification

    -- Icon based on type
    local iconId = "rbxassetid://3926305904"
    local iconColor = Color3.fromRGB(255, 255, 255)
    local iconRect = Vector2.new(0, 0)

    if notificationConfig.Type == "Success" then
        iconRect = Vector2.new(4, 836)
        iconColor = Color3.fromRGB(0, 255, 0)
    elseif notificationConfig.Type == "Warning" then
        iconRect = Vector2.new(4, 876)
        iconColor = Color3.fromRGB(255, 255, 0)
    elseif notificationConfig.Type == "Error" then
        iconRect = Vector2.new(4, 916)
        iconColor = Color3.fromRGB(255, 0, 0)
    else -- Info
        iconRect = Vector2.new(4, 796)
        iconColor = Color3.fromRGB(0, 150, 255)
    end

    local icon = Instance.new("ImageLabel")
    icon.Size = UDim2.new(0, 24, 0, 24)
    icon.Position = UDim2.new(0, 10, 0, 10)
    icon.BackgroundTransparency = 1
    icon.Image = iconId
    icon.ImageColor3 = iconColor
    icon.ImageRectOffset = iconRect
    icon.ImageRectSize = Vector2.new(36, 36)
    icon.Parent = notification

    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -50, 0, 20)
    title.Position = UDim2.new(0, 40, 0, 8)
    title.BackgroundTransparency = 1
    title.Text = notificationConfig.Title

    -- Safely get title color
    local titleColor = VexUI.Themes["Dark"].NotificationNotifyTitleColor -- Default
    if VexUI.Themes[themeName] and VexUI.Themes[themeName].NotificationNotifyTitleColor then
        titleColor = VexUI.Themes[themeName].NotificationNotifyTitleColor
    end
    title.TextColor3 = titleColor
    title.TextSize = 14
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = notification

    -- Content
    local content = Instance.new("TextLabel")
    content.Size = UDim2.new(1, -50, 0, 40)
    content.Position = UDim2.new(0, 40, 0, 28)
    content.BackgroundTransparency = 1
    content.Text = notificationConfig.Content

    -- Safely get content color
    local contentColor = VexUI.Themes["Dark"].NotificationNotifyTextColor -- Default
    if VexUI.Themes[themeName] and VexUI.Themes[themeName].NotificationNotifyTextColor then
        contentColor = VexUI.Themes[themeName].NotificationNotifyTextColor
    end
    content.TextColor3 = contentColor
    content.TextSize = 12
    content.Font = Enum.Font.Gotham
    content.TextXAlignment = Enum.TextXAlignment.Left
    content.TextYAlignment = Enum.TextYAlignment.Top
    content.TextWrapped = true
    content.Parent = notification

    -- Progress bar
    local progressBar = Instance.new("Frame")
    progressBar.Size = UDim2.new(1, 0, 0, 2)
    progressBar.Position = UDim2.new(0, 0, 1, -2)

    -- Safely get progress bar color
    local progressColor = VexUI.Themes["Dark"].Selection -- Default
    if VexUI.Themes[themeName] and VexUI.Themes[themeName].Selection then
        progressColor = VexUI.Themes[themeName].Selection
    end
    progressBar.BackgroundColor3 = progressColor
    progressBar.BorderSizePixel = 0
    progressBar.Parent = notification

    -- Animate in
    notification.Position = UDim2.new(1, 20, 0, 0)
    TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        Position = UDim2.new(0, 0, 0, 0)
    }):Play()

    -- Progress bar animation
    TweenService:Create(progressBar, TweenInfo.new(notificationConfig.Duration, Enum.EasingStyle.Linear), {
        Size = UDim2.new(0, 0, 0, 2)
    }):Play()

    -- Auto remove
    task.delay(notificationConfig.Duration, function()
        TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            Position = UDim2.new(1, 20, 0, 0)
        }):Play()

        task.wait(0.3)
        notification:Destroy()

        -- Update layout
        self:UpdateLayout()
    end)

    -- Update container size
    self:UpdateLayout()

    return notification
end

function VexUI.Notifications:UpdateLayout()
    local totalHeight = 0
    for _, child in ipairs(self.container:GetChildren()) do
        if child:IsA("Frame") then
            totalHeight = totalHeight + child.Size.Y.Offset + 10
        end
    end
    self.container.Size = UDim2.new(0, 300, 0, totalHeight)
end

-- Close the Notifications module definition
end

-- Configuration Saving/Loading System
VexUI.Config = {}

function VexUI.Config:Save(folderName, fileName, data)
    if not isfolder(folderName) then
        makefolder(folderName)
    end

    local jsonData = game:GetService("HttpService"):JSONEncode(data)
    writefile(folderName .. "/" .. fileName .. ".json", jsonData)
end

function VexUI.Config:Load(folderName, fileName)
    local filePath = folderName .. "/" .. fileName .. ".json"
    if isfile(filePath) then
        local jsonData = readfile(filePath)
        return game:GetService("HttpService"):JSONDecode(jsonData)
    end
    return {}
end

-- Close the Config module definition
end

-- Main Interface Functions
function VexUI:Notify(config)
    return self.Notifications:Create(config)
end

function VexUI:SaveConfig(folderName, fileName)
    local config = {}
    -- Save window settings
    -- This would be expanded to save all component states
    self.Config:Save(folderName, fileName, config)
end

function VexUI:LoadConfig(folderName, fileName)
    return self.Config:Load(folderName, fileName)
end

-- Toggle Component
VexUI.Components.Toggle = setmetatable({}, VexUI.Components.Base)
VexUI.Components.Toggle.__index = VexUI.Components.Toggle

function VexUI.Components.Toggle.new(tab, config)
    config = config or {}
    local self = setmetatable(VexUI.Components.Base.new(tab, config), VexUI.Components.Toggle)

    self.config.Content = self.config.Content or ""
    self.config.Default = self.config.Default or false
    self.value = self.config.Default

    self:CreateToggle()
    return self
end

function VexUI.Components.Toggle:CreateToggle()
    local frame = self:CreateFrame()
    frame.Size = UDim2.new(1, -20, 0, 60)

    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -80, 0, 20)
    title.Position = UDim2.new(0, 10, 0, 5)
    title.BackgroundTransparency = 1
    title.Text = self.config.Title
    title.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTitleColors
    title.TextSize = 14
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = frame

    -- Content
    if self.config.Content ~= "" then
        local content = Instance.new("TextLabel")
        content.Size = UDim2.new(1, -80, 0, 20)
        content.Position = UDim2.new(0, 10, 0, 25)
        content.BackgroundTransparency = 1
        content.Text = self.config.Content
        content.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextColors
        content.TextSize = 12
        content.Font = Enum.Font.Gotham
        content.TextXAlignment = Enum.TextXAlignment.Left
        content.Parent = frame
    end

    -- Toggle Switch Background
    local toggleBg = Instance.new("Frame")
    toggleBg.Size = UDim2.new(0, 50, 0, 24)
    toggleBg.Position = UDim2.new(1, -60, 0.5, -12)
    toggleBg.BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextBoxKeyBindColors
    toggleBg.BorderSizePixel = 0
    toggleBg.Parent = frame

    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = toggleBg

    -- Toggle Switch
    self.toggleSwitch = Instance.new("Frame")
    self.toggleSwitch.Size = UDim2.new(0, 20, 0, 20)
    self.toggleSwitch.Position = self.value and UDim2.new(0, 26, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
    self.toggleSwitch.BackgroundColor3 = self.value and VexUI.Themes[self.tab.window.config.Theme].Selection or VexUI.Themes[self.tab.window.config.Theme].ItemTextBoxKeyBindStrokeColors
    self.toggleSwitch.BorderSizePixel = 0
    self.toggleSwitch.Parent = toggleBg

    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(1, 0)
    switchCorner.Parent = self.toggleSwitch

    -- Toggle Button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(1, 0, 1, 0)
    toggleButton.BackgroundTransparency = 1
    toggleButton.Text = ""
    toggleButton.Parent = frame

    -- Toggle functionality
    local function updateToggle()
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
        if self.value then
            TweenService:Create(self.toggleSwitch, tweenInfo, {
                Position = UDim2.new(0, 26, 0.5, -10),
                BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].Selection
            }):Play()
            TweenService:Create(toggleBg, tweenInfo, {
                BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].Selection
            }):Play()
        else
            TweenService:Create(self.toggleSwitch, tweenInfo, {
                Position = UDim2.new(0, 2, 0.5, -10),
                BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextBoxKeyBindStrokeColors
            }):Play()
            TweenService:Create(toggleBg, tweenInfo, {
                BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextBoxKeyBindColors
            }):Play()
        end
    end

    toggleButton.MouseButton1Click:Connect(function()
        self.value = not self.value
        updateToggle()
        self.config.Callback(self.value)
    end)

    -- Initialize
    updateToggle()
end

function VexUI.Components.Toggle:Set(value)
    self.value = value
    self:CreateToggle() -- Recreate to update visual state
    self.config.Callback(self.value)
end

-- Slider Component
VexUI.Components.Slider = setmetatable({}, VexUI.Components.Base)
VexUI.Components.Slider.__index = VexUI.Components.Slider

function VexUI.Components.Slider.new(tab, config)
    config = config or {}
    local self = setmetatable(VexUI.Components.Base.new(tab, config), VexUI.Components.Slider)

    self.config.Content = self.config.Content or ""
    self.config.Min = self.config.Min or 0
    self.config.Max = self.config.Max or 100
    self.config.Default = self.config.Default or 0
    self.config.Increment = self.config.Increment or 1
    self.value = self.config.Default

    self:CreateSlider()
    return self
end

function VexUI.Components.Slider:CreateSlider()
    local frame = self:CreateFrame()
    frame.Size = UDim2.new(1, -20, 0, 70)

    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 0, 20)
    title.Position = UDim2.new(0, 10, 0, 5)
    title.BackgroundTransparency = 1
    title.Text = self.config.Title
    title.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTitleColors
    title.TextSize = 14
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = frame

    -- Content
    if self.config.Content ~= "" then
        local content = Instance.new("TextLabel")
        content.Size = UDim2.new(1, -20, 0, 15)
        content.Position = UDim2.new(0, 10, 0, 25)
        content.BackgroundTransparency = 1
        content.Text = self.config.Content
        content.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextColors
        content.TextSize = 12
        content.Font = Enum.Font.Gotham
        content.TextXAlignment = Enum.TextXAlignment.Left
        content.Parent = frame
    end

    -- Value Display
    self.valueLabel = Instance.new("TextLabel")
    self.valueLabel.Size = UDim2.new(0, 50, 0, 20)
    self.valueLabel.Position = UDim2.new(1, -60, 0, 5)
    self.valueLabel.BackgroundTransparency = 1
    self.valueLabel.Text = tostring(self.value)
    self.valueLabel.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].NumColor
    self.valueLabel.TextSize = 14
    self.valueLabel.Font = Enum.Font.GothamBold
    self.valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    self.valueLabel.Parent = frame

    -- Slider Background
    local sliderBg = Instance.new("Frame")
    sliderBg.Size = UDim2.new(1, -20, 0, 6)
    sliderBg.Position = UDim2.new(0, 10, 0, 50)
    sliderBg.BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextBoxKeyBindColors
    sliderBg.BorderSizePixel = 0
    sliderBg.Parent = frame

    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(1, 0)
    sliderCorner.Parent = sliderBg

    -- Slider Fill
    self.sliderFill = Instance.new("Frame")
    self.sliderFill.Size = UDim2.new((self.value - self.config.Min) / (self.config.Max - self.config.Min), 0, 1, 0)
    self.sliderFill.BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].Selection
    self.sliderFill.BorderSizePixel = 0
    self.sliderFill.Parent = sliderBg

    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = self.sliderFill

    -- Slider Button
    self.sliderButton = Instance.new("Frame")
    self.sliderButton.Size = UDim2.new(0, 16, 0, 16)
    self.sliderButton.Position = UDim2.new((self.value - self.config.Min) / (self.config.Max - self.config.Min), 0, 0.5, -8)
    self.sliderButton.BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].Selection
    self.sliderButton.BorderSizePixel = 0
    self.sliderButton.Parent = sliderBg

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(1, 0)
    buttonCorner.Parent = self.sliderButton

    -- Slider Interaction
    local dragging = false

    local function updateSlider(input)
        local relativeX = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
        local newValue = math.floor((self.config.Min + (self.config.Max - self.config.Min) * relativeX) / self.config.Increment) * self.config.Increment
        newValue = math.clamp(newValue, self.config.Min, self.config.Max)

        if newValue ~= self.value then
            self.value = newValue
            self.valueLabel.Text = tostring(self.value)

            TweenService:Create(self.sliderFill, TweenInfo.new(0.1), {
                Size = UDim2.new(relativeX, 0, 1, 0)
            }):Play()

            TweenService:Create(self.sliderButton, TweenInfo.new(0.1), {
                Position = UDim2.new(relativeX, 0, 0.5, -8)
            }):Play()

            self.config.Callback(self.value)
        end
    end

    sliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            updateSlider(input)
        end
    end)

    sliderBg.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input)
        end
    end)
end

function VexUI.Components.Slider:Set(value)
    self.value = math.clamp(value, self.config.Min, self.config.Max)
    self:CreateSlider() -- Recreate to update visual state
    self.config.Callback(self.value)
end

-- Dropdown Component
VexUI.Components.Dropdown = setmetatable({}, VexUI.Components.Base)
VexUI.Components.Dropdown.__index = VexUI.Components.Dropdown

function VexUI.Components.Dropdown.new(tab, config)
    config = config or {}
    local self = setmetatable(VexUI.Components.Base.new(tab, config), VexUI.Components.Dropdown)

    self.config.Content = self.config.Content or ""
    self.config.Options = self.config.Options or {}
    self.config.Default = self.config.Default or ""
    self.config.Multi = self.config.Multi or false
    self.value = self.config.Multi and (self.config.Default or {}) or self.config.Default
    self.expanded = false

    self:CreateDropdown()
    return self
end

function VexUI.Components.Dropdown:CreateDropdown()
    local frame = self:CreateFrame()
    frame.Size = UDim2.new(1, -20, 0, 60)

    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 0, 20)
    title.Position = UDim2.new(0, 10, 0, 5)
    title.BackgroundTransparency = 1
    title.Text = self.config.Title
    title.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTitleColors
    title.TextSize = 14
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = frame

    -- Content
    if self.config.Content ~= "" then
        local content = Instance.new("TextLabel")
        content.Size = UDim2.new(1, -20, 0, 15)
        content.Position = UDim2.new(0, 10, 0, 25)
        content.BackgroundTransparency = 1
        content.Text = self.config.Content
        content.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextColors
        content.TextSize = 12
        content.Font = Enum.Font.Gotham
        content.TextXAlignment = Enum.TextXAlignment.Left
        content.Parent = frame
    end

    -- Selected Value Display
    self.selectedLabel = Instance.new("TextLabel")
    self.selectedLabel.Size = UDim2.new(1, -60, 0, 20)
    self.selectedLabel.Position = UDim2.new(0, 10, 0, 40)
    self.selectedLabel.BackgroundTransparency = 1
    self.selectedLabel.Text = self.config.Multi and table.concat(self.value, ", ") or self.value
    self.selectedLabel.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextBoxTextColor
    self.selectedLabel.TextSize = 12
    self.selectedLabel.Font = Enum.Font.Gotham
    self.selectedLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.selectedLabel.Parent = frame

    -- Arrow Icon
    local arrow = Instance.new("ImageLabel")
    arrow.Size = UDim2.new(0, 16, 0, 16)
    arrow.Position = UDim2.new(1, -30, 0, 42)
    arrow.BackgroundTransparency = 1
    arrow.Image = "rbxassetid://3926305904"
    arrow.ImageColor3 = VexUI.Themes[self.tab.window.config.Theme].DropdownColorPickerImageArrowColors
    arrow.ImageRectOffset = Vector2.new(324, 364)
    arrow.ImageRectSize = Vector2.new(36, 36)
    arrow.Parent = frame

    -- Dropdown Button
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Size = UDim2.new(1, 0, 1, 0)
    dropdownButton.BackgroundTransparency = 1
    dropdownButton.Text = ""
    dropdownButton.Parent = frame

    -- Options Frame (initially hidden)
    self.optionsFrame = Instance.new("Frame")
    self.optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    self.optionsFrame.Position = UDim2.new(0, 0, 1, 0)
    self.optionsFrame.BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemColors
    self.optionsFrame.BorderSizePixel = 0
    self.optionsFrame.ClipsDescendants = true
    self.optionsFrame.Visible = false
    self.optionsFrame.Parent = frame

    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 6)
    optionsCorner.Parent = self.optionsFrame

    -- Options Scrolling Frame
    local optionsScroll = Instance.new("ScrollingFrame")
    optionsScroll.Size = UDim2.new(1, 0, 1, 0)
    optionsScroll.BackgroundTransparency = 1
    optionsScroll.ScrollBarThickness = 4
    optionsScroll.Parent = self.optionsFrame

    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.Parent = optionsScroll
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder

    -- Create option buttons
    for _, option in ipairs(self.config.Options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, 0, 0, 30)
        optionButton.BackgroundTransparency = 1
        optionButton.Text = option
        optionButton.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextColors
        optionButton.TextSize = 12
        optionButton.Font = Enum.Font.Gotham
        optionButton.Parent = optionsScroll

        optionButton.MouseButton1Click:Connect(function()
            if self.config.Multi then
                if table.find(self.value, option) then
                    for i, v in ipairs(self.value) do
                        if v == option then
                            table.remove(self.value, i)
                            break
                        end
                    end
                else
                    table.insert(self.value, option)
                end
                self.selectedLabel.Text = table.concat(self.value, ", ")
            else
                self.value = option
                self.selectedLabel.Text = option
                self:ToggleDropdown()
            end
            self.config.Callback(self.value)
        end)
    end

    -- Update canvas size
    optionsScroll.CanvasSize = UDim2.new(0, 0, 0, #self.config.Options * 30)

    -- Toggle dropdown
    dropdownButton.MouseButton1Click:Connect(function()
        self:ToggleDropdown()
    end)
end

function VexUI.Components.Dropdown:ToggleDropdown()
    self.expanded = not self.expanded

    if self.expanded then
        self.optionsFrame.Visible = true
        TweenService:Create(self.optionsFrame, TweenInfo.new(0.2), {
            Size = UDim2.new(1, 0, 0, math.min(#self.config.Options * 30, 150))
        }):Play()
    else
        TweenService:Create(self.optionsFrame, TweenInfo.new(0.2), {
            Size = UDim2.new(1, 0, 0, 0)
        }):Play()
        wait(0.2)
        self.optionsFrame.Visible = false
    end
end

function VexUI.Components.Dropdown:Set(value)
    self.value = value
    self.selectedLabel.Text = self.config.Multi and table.concat(self.value, ", ") or self.value
    self.config.Callback(self.value)
end

-- Close the Dropdown component definition
end

function VexUI.Core.Window:SelectTab(tab)
    -- Deselect current tab
    if self.currentTab then
        self.currentTab:Deselect()
    end

    -- Select new tab
    self.currentTab = tab
    tab:Select()
end

function VexUI.Core.Window:CreateTab(name, icon)
    local tab = VexUI.Core.Tab.new(self, name, icon)
    self.tabs[name] = tab

    -- Select first tab
    if not self.currentTab then
        self:SelectTab(tab)
    end

    return tab
end

-- Close the Tab class definition
end

-- Component Base Class
VexUI.Components.Base = {}
VexUI.Components.Base.__index = VexUI.Components.Base

function VexUI.Components.Base.new(tab, config)
    local self = setmetatable({}, VexUI.Components.Base)

    self.tab = tab
    self.config = config or {}
    if type(self.config) ~= "table" then
        self.config = {}
    end
    self.config.Title = self.config.Title or "Component"
    self.config.Callback = self.config.Callback or function() end

    return self
end

function VexUI.Components.Base:CreateFrame()
    self.frame = Instance.new("Frame")
    self.frame.Name = self.config.Title
    self.frame.Size = UDim2.new(1, -20, 0, 50)
    self.frame.BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemColors
    self.frame.BorderSizePixel = 0
    self.frame.Parent = self.tab.pageFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = self.frame

    return self.frame
end

-- Button Component
VexUI.Components.Button = setmetatable({}, VexUI.Components.Base)
VexUI.Components.Button.__index = VexUI.Components.Button

function VexUI.Components.Button.new(tab, config)
    config = config or {}
    local self = setmetatable(VexUI.Components.Base.new(tab, config), VexUI.Components.Button)

    self.config.Content = self.config.Content or ""
    self.config.Icon = self.config.Icon or ""

    self:CreateButton()
    return self
end

function VexUI.Components.Button:CreateButton()
    local frame = self:CreateFrame()
    frame.Size = UDim2.new(1, -20, 0, 60)

    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -60, 0, 20)
    title.Position = UDim2.new(0, 10, 0, 5)
    title.BackgroundTransparency = 1
    title.Text = self.config.Title
    title.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTitleColors
    title.TextSize = 14
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = frame

    -- Content
    if self.config.Content ~= "" then
        local content = Instance.new("TextLabel")
        content.Size = UDim2.new(1, -60, 0, 20)
        content.Position = UDim2.new(0, 10, 0, 25)
        content.BackgroundTransparency = 1
        content.Text = self.config.Content
        content.TextColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemTextColors
        content.TextSize = 12
        content.Font = Enum.Font.Gotham
        content.TextXAlignment = Enum.TextXAlignment.Left
        content.Parent = frame
    end

    -- Icon
    if self.config.Icon ~= "" then
        local icon = Instance.new("ImageLabel")
        icon.Size = UDim2.new(0, 20, 0, 20)
        icon.Position = UDim2.new(1, -30, 0.5, -10)
        icon.BackgroundTransparency = 1
        icon.Image = self.config.Icon
        icon.ImageColor3 = VexUI.Themes[self.tab.window.config.Theme].ButtonIconColor or Color3.fromRGB(255, 255, 255)
        icon.Parent = frame
    end

    -- Button
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 1, 0)
    button.BackgroundTransparency = 1
    button.Text = ""
    button.Parent = frame

    -- Hover effect
    button.MouseEnter:Connect(function()
        local tween = TweenService:Create(frame, TweenInfo.new(0.2), {
            BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ButtonHover
        })
        tween:Play()
    end)

    button.MouseLeave:Connect(function()
        local tween = TweenService:Create(frame, TweenInfo.new(0.2), {
            BackgroundColor3 = VexUI.Themes[self.tab.window.config.Theme].ItemColors
        })
        tween:Play()
    end)

    -- Click effect
    button.MouseButton1Click:Connect(function()
        -- Ripple effect
        if VexUI.Utils.CreateRipple then
            VexUI.Utils.CreateRipple(VexUI.Utils, frame, button)
        end

        -- Callback
        self.config.Callback()
    end)
end

-- Utility Functions
VexUI.Utils.CreateRipple = function(self, parent, button)
    local circle = Instance.new("ImageLabel")
    circle.Name = "Ripple"
    circle.BackgroundTransparency = 1
    circle.Image = "rbxassetid://266543268"

    -- Safely get theme color
    local themeColor = Color3.fromRGB(255, 255, 255) -- Default white
    if parent and parent.Parent and parent.Parent.Parent and parent.Parent.Parent.Parent and
       parent.Parent.Parent.Parent.config and parent.Parent.Parent.Parent.config.Theme and
       VexUI.Themes[parent.Parent.Parent.Parent.config.Theme] and
       VexUI.Themes[parent.Parent.Parent.Parent.config.Theme].RippleColor then
        themeColor = VexUI.Themes[parent.Parent.Parent.Parent.config.Theme].RippleColor
    end

    circle.ImageColor3 = themeColor
    circle.ImageTransparency = 0.8
    circle.Parent = parent

    local mousePos = UserInputService:GetMouseLocation()
    local relativePos = mousePos - parent.AbsolutePosition

    circle.Position = UDim2.new(0, relativePos.X, 0, relativePos.Y)
    circle.AnchorPoint = Vector2.new(0.5, 0.5)

    local size = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 1.5
    local tween = TweenService:Create(circle, TweenInfo.new(0.6), {
        Size = UDim2.new(0, size, 0, size),
        ImageTransparency = 1
    })
    tween:Play()

    tween.Completed:Connect(function()
        circle:Destroy()
    end)
end

-- Close the Components module definition
end

-- Main Interface
function VexUI:CreateWindow(config)
    return VexUI.Core.Window.new(config)
end

-- Close the Core module definition
end

--[[
VexUI - Advanced Roblox UI Library
==================================

VexUI is a modern, feature-rich UI library for Roblox that combines the best features from popular libraries like HawkUI, Rayfield, Fluriore, SitinkHub, and WazureV1.

Features:
- Modern, clean design with multiple themes
- Tab-based navigation system
- Comprehensive component library (Button, Toggle, Slider, Dropdown)
- Animated notifications with progress bars
- Configuration saving/loading system
- Draggable windows with smooth animations
- Mobile and PC responsive design
- Ripple effects and smooth transitions
- Modular architecture for easy extension

USAGE EXAMPLES:
==============

-- Basic Window Creation
local Window = VexUI:CreateWindow({
    Name = "My Script Hub",
    Theme = "Dark", -- Dark, Light, Pink, Blue
    Size = UDim2.new(0, 600, 0, 400),
    Position = UDim2.new(0.5, -300, 0.5, -200),
    DestroyIfExists = true
})

-- Creating Tabs
local MainTab = Window:CreateTab("Main", "rbxassetid://icon1")
local SettingsTab = Window:CreateTab("Settings", "rbxassetid://icon2")

-- Adding Components to Tabs

-- Button
MainTab:CreateButton({
    Title = "Execute Script",
    Content = "Run the main script functionality",
    Callback = function()
        print("Script executed!")
    end
})

-- Toggle
MainTab:CreateToggle({
    Title = "Auto Farm",
    Content = "Automatically farm resources",
    Default = false,
    Callback = function(value)
        print("Auto Farm:", value)
    end
})

-- Slider
MainTab:CreateSlider({
    Title = "Speed",
    Content = "Adjust movement speed",
    Min = 0,
    Max = 100,
    Default = 50,
    Increment = 5,
    Callback = function(value)
        print("Speed set to:", value)
    end
})

-- Dropdown
MainTab:CreateDropdown({
    Title = "Game Mode",
    Content = "Select your preferred game mode",
    Options = {"Classic", "Hard", "Extreme", "Custom"},
    Default = "Classic",
    Multi = false,
    Callback = function(value)
        print("Selected mode:", value)
    end
})

-- Multi-select Dropdown
MainTab:CreateDropdown({
    Title = "Features",
    Content = "Choose which features to enable",
    Options = {"ESP", "Aimbot", "Speed", "Fly"},
    Default = {"ESP", "Speed"},
    Multi = true,
    Callback = function(values)
        print("Selected features:", table.concat(values, ", "))
    end
})

-- Notifications
VexUI:Notify({
    Title = "Success!",
    Content = "Script loaded successfully",
    Duration = 3,
    Type = "Success" -- Info, Success, Warning, Error
})

VexUI:Notify({
    Title = "Warning",
    Content = "This action may be risky",
    Duration = 4,
    Type = "Warning"
})

-- Configuration Saving/Loading
-- Save current settings
VexUI:SaveConfig("MyScript", "settings")

-- Load saved settings
local savedSettings = VexUI:LoadConfig("MyScript", "settings")

-- Window Controls
Window:ToggleUI() -- Show/Hide window
Window:Destroy() -- Completely destroy the window

-- Custom Themes
-- You can create custom themes by modifying VexUI.Themes
VexUI.Themes.Custom = {
    Main = Color3.fromRGB(50, 50, 50),
    Shadow = Color3.fromRGB(0, 0, 0),
    -- ... add all required theme properties
}

-- Device Detection
local deviceType = VexUI.Utils:GetDeviceType() -- Returns "PC", "Mobile", or "Tablet"

-- Advanced Usage
-- Components return their instances, so you can modify them later
local myToggle = MainTab:CreateToggle({...})
myToggle:Set(true) -- Programmatically set the toggle

local mySlider = MainTab:CreateSlider({...})
mySlider:Set(75) -- Programmatically set the slider value

API REFERENCE:
==============

VexUI:CreateWindow(config) -> Window
- Creates a new window with the specified configuration

Window:CreateTab(name, icon) -> Tab
- Creates a new tab in the window

Tab:CreateButton(config) -> Button
Tab:CreateToggle(config) -> Toggle
Tab:CreateSlider(config) -> Slider
Tab:CreateDropdown(config) -> Dropdown
- Creates components in the tab

VexUI:Notify(config) -> Notification
- Shows a notification

VexUI:SaveConfig(folder, filename)
- Saves current configuration

VexUI:LoadConfig(folder, filename) -> table
- Loads saved configuration

Window:ToggleUI()
- Toggles window visibility

Window:Destroy()
- Destroys the window

Component Configuration Options:
===============================

Button:
- Title: string - Button title
- Content: string - Button description
- Icon: string - Asset ID for icon
- Callback: function - Function to call when clicked

Toggle:
- Title: string - Toggle title
- Content: string - Toggle description
- Default: boolean - Initial state
- Callback: function(value) - Function called when toggled

Slider:
- Title: string - Slider title
- Content: string - Slider description
- Min: number - Minimum value
- Max: number - Maximum value
- Default: number - Initial value
- Increment: number - Step size
- Callback: function(value) - Function called when value changes

Dropdown:
- Title: string - Dropdown title
- Content: string - Dropdown description
- Options: table - Array of option strings
- Default: string or table - Initial selection(s)
- Multi: boolean - Allow multiple selections
- Callback: function(value(s)) - Function called when selection changes

Notification:
- Title: string - Notification title
- Content: string - Notification content
- Duration: number - Display duration in seconds
- Type: string - "Info", "Success", "Warning", "Error"
- Theme: string - Theme to use for notification

Window:
- Name: string - Window title
- Theme: string - Theme name ("Dark", "Light", "Pink", "Blue")
- Size: UDim2 - Window size
- Position: UDim2 - Window position
- DestroyIfExists: boolean - Destroy existing window with same name

THEMES:
=======
- Dark: Modern dark theme
- Light: Clean light theme
- Pink: Pink/purple theme
- Blue: Blue theme

You can create custom themes by adding them to VexUI.Themes table with all required properties.

PERFORMANCE NOTES:
=================
- Components are created efficiently with minimal overhead
- Animations use TweenService for smooth performance
- Memory is managed properly with automatic cleanup
- Large numbers of components may impact performance on low-end devices

COMPATIBILITY:
=============
- Works on all Roblox platforms (PC, Mobile, Tablet, Console)
- Compatible with most exploit environments
- Requires Roblox Lua environment

VERSION: 1.0.0
AUTHOR: Kilo Code
--]]
return VexUI
